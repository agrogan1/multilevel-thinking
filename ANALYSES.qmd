---
title: "Analyses"
author: "Andy Grogan-Kaylor"
editor: source
toc: true
---

# Setup

```{r}
#| output: false

library(Statamarkdown)

library(lme4) 

library(JuliaCall)

# julia_setup(JULIA_HOME = "/Applications/Julia-1.10.app/Contents/Resources/julia/bin")

# julia_setup(JULIA_HOME = "C:/Users/agrogan/AppData/Local/Programs/Julia-1.10.2/bin/")

```

# Four Level Model

## Stata

```{stata, collectcode=TRUE}

use "./simulate-and-analyze-multilevel-data/fourlevel.dta", clear

```

```{stata, collectcode=TRUE}

mixed outcome || UNregion: || country: || family:

```

```{stata, collectcode=TRUE}

mixed outcome t warmth physical_punishment i.identity i.intervention HDI || UNregion: || country: || id:
  
```

## R

```{r}

library(haven)

df4 <- read_dta("./simulate-and-analyze-multilevel-data/fourlevel.dta")

```

```{r}

df4$identity <- factor(df4$identity)

df4$intervention <- factor(df4$intervention)

```


::: {.callout-caution collapse="false"}
`lme4` does not directly provide p values in results, because of some disagreement over exactly how these p values should be calculated. Therefore, in this Appendix, I also call library `lmerTest` to provide p values for `lme4` results.
:::

::: {.callout-tip}
R prefers to use scientific notation when possible. I find that the use of scientific notation can be confusing in reading results. I turn off scientific notation by setting a penalty for its use:  `options(scipen = 999)`.  
:::


```{r}

library(lme4) 

library(lmerTest)

options(scipen = 999) 

fit4A <- lmer(outcome ~  (1 | UNregion/country/id),
             data = df4)

summary(fit4A)

```

```{r}

fit4B <- lmer(outcome ~ t + warmth + physical_punishment + 
                identity + intervention + HDI + 
                (1 | UNregion/country/id),
              data = df4)

summary(fit4B)

```

## Julia

```{julia}
#| output: false
#| label: Julia-getdata
#| eval: false

using Tables, MixedModels, StatFiles, DataFrames, CategoricalArrays, DataFramesMeta

df4 = DataFrame(load("./simulate-and-analyze-multilevel-data/fourlevel.dta"))

```

```{julia}
#| output: false
#| eval: false

@transform!(df4, :country = categorical(:country))

@transform!(df4, :UNregion = categorical(:UNregion))

@transform!(df4, :identity = categorical(:identity))

@transform!(df4, :intervention = categorical(:intervention))

```

```{julia}
#| label: Julia-fourlevelA
#| eval: false

m4A = fit(MixedModel, @formula(outcome ~ t + warmth + 
                                  physical_punishment + 
                                  identity + intervention + 
                                  HDI +
                                  (1 | UNregion) + 
                                  (1 | country) + 
                                  (1 | id)), df4)

```


```{julia}
#| label: Julia-fourlevelB
#| eval: false

m4B = fit(MixedModel, @formula(outcome ~ t + warmth + 
                                  physical_punishment + 
                                  identity + intervention + 
                                  HDI +
                                  (1 | UNregion) + 
                                  (1 | country) + 
                                  (1 | id)), df4)

```

# Cross Classified Model

## Stata

```{stata, collectcode=TRUE}

use "./simulate-and-analyze-multilevel-data/crossclassified.dta", clear

```

```{stata}

mixed outcome || _all: R.country || _all: R.language

```

```{stata}

mixed outcome warmth physical_punishment i.identity i.intervention HDI || _all: R.country || _all: R.language

```

## R

```{r}

library(haven)

dfCC <- read_dta("./simulate-and-analyze-multilevel-data/crossclassified.dta")

```

```{r}

dfCC$identity <- factor(dfCC$identity)

dfCC$intervention <- factor(dfCC$intervention)

```

```{r}

library(lme4) 

library(lmerTest)

options(scipen = 999) 

fitCC_A <- lmer(outcome ~  
                 (1 | country) +
                 (1 | language),
             data = dfCC)

summary(fitCC_A)

```

```{r}

fitCC_B <- lmer(outcome ~ t + warmth + physical_punishment + 
                identity + intervention + HDI + 
                (1 | country) +
                (1 | language),
              data = dfCC)

summary(fitCC_B)

```

## Julia





